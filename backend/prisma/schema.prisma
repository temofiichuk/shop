datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         Int       @id @unique @default(autoincrement())
  name       String
  email      String    @unique
  password   String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  phone      String    @default("-")
  avatar     String    @default("/uploads/avatas/default_avatar.png")
  reviews    Review[]
  rating     Int?
  orders     Order[]
  favorites  Product[]
}

model Admin {
  id               Int           @id @unique @default(autoincrement())
  name             String
  email            String        @unique
  password         String
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  avatar           String        @default("/admin/uploads/avatas/default_admin_avatar.png")
  type             EnumAdminType @default(ADMIN)
  created_products Product[]
}

enum EnumAdminType {
  ROOTADMIN
  ADMIN
}

model Category {
  id            Int           @id @unique @default(autoincrement())
  name          String        @unique
  created_at    DateTime      @default(now())
  updated_at    DateTime      @updatedAt
  subcategories Subcategory[]
  products      Product[]
  slug          String        @unique
}

model Subcategory {
  id          Int       @id @unique @default(autoincrement())
  name        String    @unique
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  products    Product[]
  category    Category? @relation(fields: [category_id], references: [id])
  category_id Int?
  slug        String    @unique
}

model Product {
  id             Int           @id @unique @default(autoincrement())
  name           String        @unique
  price          Int
  slug           String        @unique
  created_at     DateTime      @default(now())
  updated_at     DateTime      @updatedAt
  combination_id Int?
  descriptions   Description[]
  stock          Int
  rating         Int @default(0)
  images         Image[]
  reviews        Review[]
  admin          Admin?       @relation(fields: [admin_id], references: [id])
  admin_id       Int?
  category       Category?     @relation(fields: [category_id], references: [id])
  category_id    Int?
  subcategory    Subcategory?  @relation(fields: [subcategory_id], references: [id])
  subcategory_id Int?
  order_item     OrderItem[]
  user           User?         @relation(fields: [user_id], references: [id])
  user_id        Int?
}

model Image {
  id         Int      @id @unique @default(autoincrement())
  name       String
  url        String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  product    Product? @relation(fields: [product_id], references: [id])
  product_id Int?
}

model Description {
  id         Int      @id @unique @default(autoincrement())
  head       String
  body       String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  product    Product? @relation(fields: [product_id], references: [id])
  product_id Int?
}

model Review {
  id         Int              @id @unique @default(autoincrement())
  rating     Int
  comment    String
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt
  product    Product?         @relation(fields: [product_id], references: [id])
  product_id Int?
  user       User?            @relation(fields: [user_id], references: [id])
  user_id    Int?
  status     EnumReviewStatus @default(PENDING)
}

enum EnumReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

model Order {
  id                Int             @id @unique @default(autoincrement())
  created_at        DateTime        @default(now())
  updated_at        DateTime        @updatedAt
  user              User?           @relation(fields: [user_id], references: [id])
  user_id           Int?
  order_total_price Int
  order_items       OrderItem[]
  status            EnumOrderStatus @default(PENDING)
}

enum EnumOrderStatus {
  PENDING
  CANCELED
  AWAITING_PAYMENT
  PAYED
  SHIPPED
  DELIVERED
  FINISHED
}

model OrderItem {
  id             Int      @id @unique @default(autoincrement())
  created_at     DateTime @default(now())
  updated_at     DateTime @updatedAt
  product        Product? @relation(fields: [product_id], references: [id])
  order          Order?   @relation(fields: [order_id], references: [id])
  order_id       Int?
  product_id     Int?
  combination_id Int?
  quantity       Int      @default(1)
  price          Int
  total_price    Int
}
